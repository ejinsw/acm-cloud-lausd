name: Build and Deploy

on:
  workflow_run:
    workflows: ["Test"]
    types:
      - completed
    branches: [ "main" ]
  merge_group:

env:
  AWS_REGION: us-west-1
  PROJECT_NAME: acm-cloud-lausd
  ENVIRONMENT: dev

jobs:
  build-and-push-lambda-images:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest
    outputs:
      api_repo_url: ${{ steps.build-api.outputs.repo_url }}
      websocket_repo_url: ${{ steps.build-websocket.outputs.repo_url }}
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2
    
    - name: Build and push API Lambda image
      id: build-api
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: lambda-${{ env.PROJECT_NAME }}-api-${{ env.ENVIRONMENT }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Get ECR repository URL
        REPO_URL=$(aws ecr describe-repositories \
          --repository-names "$ECR_REPOSITORY" \
          --region ${{ env.AWS_REGION }} \
          --query 'repositories[0].repositoryUri' \
          --output text)
        
        # Build the image
        docker build -f backend/api/Dockerfile.lambda -t $REPO_URL:$IMAGE_TAG backend/api
        docker tag $REPO_URL:$IMAGE_TAG $REPO_URL:latest
        
        # Push the image
        docker push $REPO_URL:$IMAGE_TAG
        docker push $REPO_URL:latest
        
        echo "api_image_uri=$REPO_URL:$IMAGE_TAG" >> $GITHUB_OUTPUT
        echo "repo_url=$REPO_URL" >> $GITHUB_OUTPUT
    
    - name: Build and push WebSocket Lambda image
      id: build-websocket
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: lambda-${{ env.PROJECT_NAME }}-websocket-${{ env.ENVIRONMENT }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Get ECR repository URL
        REPO_URL=$(aws ecr describe-repositories \
          --repository-names "$ECR_REPOSITORY" \
          --region ${{ env.AWS_REGION }} \
          --query 'repositories[0].repositoryUri' \
          --output text)
        
        # Build the image
        docker build -f backend/websocket-server/server/Dockerfile.lambda -t $REPO_URL:$IMAGE_TAG backend/websocket-server/server
        docker tag $REPO_URL:$IMAGE_TAG $REPO_URL:latest
        
        # Push the image
        docker push $REPO_URL:$IMAGE_TAG
        docker push $REPO_URL:latest
        
        echo "websocket_image_uri=$REPO_URL:$IMAGE_TAG" >> $GITHUB_OUTPUT
        echo "repo_url=$REPO_URL" >> $GITHUB_OUTPUT

  update-lambda-functions:
    needs: [build-and-push-lambda-images]
    runs-on: ubuntu-latest
    
    steps:
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Update API Lambda function
      env:
        LAMBDA_NAME: api
        API_REPO_URL: ${{ needs.build-and-push-lambda-images.outputs.api_repo_url }}
      run: |
        echo "üîÑ Updating API Lambda function: $LAMBDA_NAME"
        echo "üì¶ Using image: $API_REPO_URL:latest"
        aws lambda update-function-code \
          --function-name $LAMBDA_NAME \
          --region ${{ env.AWS_REGION }} \
          --image-uri $API_REPO_URL:latest
        
        echo "‚è≥ Waiting for API Lambda function update to complete..."
        aws lambda wait function-updated \
          --function-name $LAMBDA_NAME \
          --region ${{ env.AWS_REGION }}
        
        echo "‚úÖ API Lambda function updated successfully!"
    
    - name: Update WebSocket Lambda function
      env:
        LAMBDA_NAME: websocket
        WEBSOCKET_REPO_URL: ${{ needs.build-and-push-lambda-images.outputs.websocket_repo_url }}
      run: |
        echo "üîÑ Updating WebSocket Lambda function: $LAMBDA_NAME"
        echo "üì¶ Using image: $WEBSOCKET_REPO_URL:latest"
        aws lambda update-function-code \
          --function-name $LAMBDA_NAME \
          --region ${{ env.AWS_REGION }} \
          --image-uri $WEBSOCKET_REPO_URL:latest
        
        echo "‚è≥ Waiting for WebSocket Lambda function update to complete..."
        aws lambda wait function-updated \
          --function-name $LAMBDA_NAME \
          --region ${{ env.AWS_REGION }}
        
        echo "‚úÖ WebSocket Lambda function updated successfully!"

  test-lambda-functions:
    needs: [update-lambda-functions]
    runs-on: ubuntu-latest
    
    steps:
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Test API Lambda function
      env:
        LAMBDA_NAME: api
      run: |
        echo "üß™ Testing API Lambda function..."
        sleep 10  # Give it a moment to fully initialize
        
        aws lambda invoke \
          --function-name $LAMBDA_NAME \
          --region ${{ env.AWS_REGION }} \
          --payload '{"httpMethod":"GET","path":"/api/health","headers":{},"queryStringParameters":null,"body":null,"isBase64Encoded":false}' \
          response.json
        
        echo "üìÑ API Response:"
        cat response.json
        rm response.json
        
        echo "‚úÖ API Lambda function test completed!"
    
    - name: Test WebSocket Lambda function
      env:
        LAMBDA_NAME: websocket
      run: |
        echo "üß™ Testing WebSocket Lambda function..."
        sleep 5  # Give it a moment to fully initialize
        
        aws lambda invoke \
          --function-name $LAMBDA_NAME \
          --region ${{ env.AWS_REGION }} \
          --payload '{"requestContext":{"routeKey":"$connect","connectionId":"test-connection"}}' \
          websocket-response.json
        
        echo "üìÑ WebSocket Response:"
        cat websocket-response.json
        rm websocket-response.json
        
        echo "‚úÖ WebSocket Lambda function test completed!"

  notify-deployment:
    needs: [test-lambda-functions]
    runs-on: ubuntu-latest
    
    steps:
    - name: Notify deployment success
      run: |
        echo "üéâ Deployment completed successfully!"
        echo "üì¶ API Lambda: Updated with latest ECR image"
        echo "üì¶ WebSocket Lambda: Updated with latest ECR image"
        echo "‚úÖ Both functions tested and working"
        echo "üîó Commit SHA: ${{ github.sha }}" 