name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  AWS_REGION: us-west-1
  NODE_VERSION: '18'

jobs:
  test-frontend:
    runs-on: alpine-latest
    defaults:
      run:
        working-directory: ./frontend
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: './frontend/package-lock.json'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run linting
      run: npm run lint
    
    - name: Run tests
      run: npm test
    
    - name: Build
      run: npm run build

  test-api:
    runs-on: alpine-latest
    defaults:
      run:
        working-directory: ./backend/api
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: admin
          POSTGRES_PASSWORD: password
          POSTGRES_DB: postgres
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: './backend/api/package-lock.json'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run linting
      run: npm run lint
    
    - name: Run tests
      run: npm test
      env:
        DATABASE_URL: postgresql://admin:password@localhost:5432/postgres

  deploy-infrastructure:
    needs: [test-frontend, test-api]
    if: github.ref == 'refs/heads/main'
    runs-on: alpine-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: "1.5.0"
    
    - name: Terraform Init
      working-directory: ./infrastructure/free-tier
      run: terraform init
    
    - name: Terraform Plan
      working-directory: ./infrastructure/free-tier
      run: terraform plan -out=tfplan
    
    - name: Terraform Apply
      working-directory: ./infrastructure/free-tier
      run: terraform apply -auto-approve tfplan

  deploy-frontend:
    needs: [test-frontend, deploy-infrastructure]
    if: github.ref == 'refs/heads/main'
    runs-on: alpine-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: './frontend/package-lock.json'
    
    - name: Install dependencies
      run: |
        cd frontend
        npm ci
    
    - name: Build
      run: |
        cd frontend
        npm run build
    
    - name: Deploy to Vercel
      uses: amondnet/vercel-action@v25
      with:
        vercel-token: ${{ secrets.VERCEL_TOKEN }}
        vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
        vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
        working-directory: ./frontend

  deploy-api:
    needs: [test-api, deploy-infrastructure]
    if: github.ref == 'refs/heads/main'
    runs-on: alpine-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: './backend/api/package-lock.json'
    
    - name: Install dependencies
      run: |
        cd backend/api
        npm ci
    
    - name: Create deployment package
      run: |
        cd backend/api
        zip -r lambda-deployment.zip . -x "node_modules/*" "*.git*" "*.env*"
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Update Lambda function
      run: |
        aws lambda update-function-code \
          --function-name acm-cloud-lausd-function \
          --zip-file fileb://backend/api/lambda-deployment.zip

  notify-deployment:
    needs: [deploy-frontend, deploy-api]
    if: github.ref == 'refs/heads/main'
    runs-on: alpine-latest
    
    steps:
    - name: Notify deployment success
      run: |
        echo "Deployment completed successfully!"
        echo "Frontend: https://your-app.vercel.app"
        echo "Backend API: https://your-api-gateway-url.amazonaws.com" 