# Multi-stage build for minimal Lambda image
# Stage 1: Build TypeScript and generate Prisma client
FROM node:20-alpine as builder

WORKDIR /build

# Copy only package files first (for better caching)
COPY package*.json ./

# Install all dependencies for building
RUN npm ci

# Copy everything
COPY . .

# Generate Prisma client
RUN npx prisma generate

# Build TypeScript to JavaScript
RUN npm run build

# Stage 2: Minimal production image
FROM node:20-alpine

# Install only essential runtime dependencies
RUN apk add --no-cache ca-certificates

# Set up Lambda runtime environment
ENV LAMBDA_TASK_ROOT=/var/task
ENV LAMBDA_RUNTIME_DIR=/var/runtime
WORKDIR ${LAMBDA_TASK_ROOT}

# Copy only package files
COPY package*.json ./

# Install only production dependencies and manually remove unnecessary packages
RUN npm ci --only=production --omit=dev && \
    rm -rf node_modules/typescript node_modules/prisma

# Copy ONLY the compiled dist and pre-generated Prisma client from builder
COPY --from=builder /build/dist ./dist
COPY --from=builder /build/node_modules/.prisma ./node_modules/.prisma
COPY --from=builder /build/node_modules/@prisma ./node_modules/@prisma

# Set the CMD to the handler function
CMD [ "node", "dist/app.js" ] 