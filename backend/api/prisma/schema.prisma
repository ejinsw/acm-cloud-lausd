// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id // Auth0 user_id
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  email     String    @unique
  role      UserRole
  verified  Boolean   @default(false)
  firstName String
  lastName  String
  birthdate DateTime?

  // Address
  street    String?
  apartment String?
  city      String?
  state     String?
  zip       String?
  country   String?

  // School
  schoolName String?

  // Profile
  profilePicture String?
  bio            String?

  // Role-specific fields
  grade             String? // For students
  parentFirstName   String? // For students
  parentLastName    String? // For students
  parentEmail       String? // For students
  parentPhone       String? // For students
  interests         String[] // For students
  learningGoals     String[] // For students
  education         String[] // For instructors
  experience        String[] // For instructors
  certificationUrls String[] // For instructors
  averageRating     Float? // For instructors

  // Relations
  reviewsOwn     Review[]         @relation("owner")
  reviewsRecipient  Review[]         @relation("recipient")
  instructorSessions Session[]        @relation("InstructorSessions")
  studentSessions    Session[]        @relation("StudentSessions")
  subjects           Subject[] // For instructors
  sessionRequests    SessionRequest[] @relation("StudentSessionRequests")

  SessionHistoryItems SessionHistoryItem[]
}

model Session {
  id           String    @id @default(uuid())
  name         String
  description  String?
  startTime    DateTime?
  endTime      DateTime?
  zoomLink     String?
  maxAttendees Int?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  // Session Details
  status     SessionStatus @default(SCHEDULED)
  materials  String[]
  objectives String[]

  instructorId   String
  instructor     User             @relation("InstructorSessions", fields: [instructorId], references: [id])
  students       User[]           @relation("StudentSessions")
  subjects       Subject[]
  sessionRequests SessionRequest[] @relation("SessionRequests")

  @@index([instructorId])
}

model SessionRequest {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  status    SessionRequestStatus @default(PENDING)

  studentId String
  student   User    @relation("StudentSessionRequests", fields: [studentId], references: [id], onDelete: Cascade)
  sessionId String
  session   Session @relation("SessionRequests", fields: [sessionId], references: [id], onDelete: Cascade)

  @@index([studentId])
  @@index([sessionId])
}

model SessionHistoryItem {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  name         String
  description  String?
  startTime    DateTime?
  endTime      DateTime?
  zoomLink     String?
  maxAttendees Int?

  // Session Details
  status     SessionStatus @default(SCHEDULED)
  materials  String[]
  objectives String[]
  subjects   String[]
  instructorName String?
  studentNames String[]

  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String
  relatedReview Review? @relation("relatedReview")

  @@index([userId])
}

model Review {
  id        String   @id @default(uuid())
  rating    Float
  comment   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  sessionHistoryItemId String? @unique
  sessionHistoryItem   SessionHistoryItem? @relation("relatedReview", fields: [sessionHistoryItemId], references: [id])

  ownerId    String
  owner      User   @relation("owner", fields: [ownerId], references: [id])
  recipientId String
  recipient   User   @relation("recipient", fields: [recipientId], references: [id])

  @@index([ownerId])
  @@index([recipientId])
  @@index([sessionHistoryItemId])
}

model Subject {
  id          String  @id @default(uuid())
  name        String  @unique
  description String?
  category    String?
  level       String?

  instructors User[]
  sessions    Session[]
}

enum UserRole {
  STUDENT
  INSTRUCTOR
  ADMIN
}

enum SessionStatus {
  SCHEDULED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum SessionRequestStatus {
  PENDING
  ACCEPTED
  REJECTED
}